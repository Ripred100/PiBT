/*
This is the class that has the methods that the main class usese
*/








import java.io.File;
import java.util.Random;
import javax.sound.sampled.*;

public class PlayAudio
{

    private long time=0L;
    private long status;
    Clip clip;
    AudioInputStream audioInputStream;
    private int file;
    public int num1=0;

    public PlayAudio(int file, float volume)
    {
        this.file=file;
        try
        {
            audioInputStream = AudioSystem.getAudioInputStream(new File("C://Users//DarkKnight528491//Desktop/Play/" + file +".wav"));
            clip = AudioSystem.getClip();
            clip.open(audioInputStream);
            setVolume(volume,clip);
            clip.start();
        }
        catch (Exception e)
        {
            System.out.println("ERROR: Audio malfunction");
            e.printStackTrace();
        }

    }

    public void pausePlay() {
        byte[] buffer = new byte[4096];
        for (File file : ) {
            try {
                AudioInputStream is = AudioSystem.getAudioInputStream(new File("C://Users//DarkKnight528491//Desktop/Play/" + file +".wav"));
                AudioFormat format = is.getFormat();
                SourceDataLine line = AudioSystem.getSourceDataLine(format);
                line.open(format);
                line.start();
                while (is.available() > 0) {
                    int len = is.read(buffer);
                    line.write(buffer, 0, len);
                }
                line.drain();
                line.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        time=clip.getMicrosecondPosition();
        clip.stop();
        clip.close();
    }


    public void resumePlay()
    {
        try
        {
            audioInputStream = AudioSystem.getAudioInputStream(new File("C://Users//DarkKnight528491//Desktop/Play/" + file +".wav"));
            clip = AudioSystem.getClip();
            clip.open(audioInputStream);
            clip.loop(Clip.LOOP_CONTINUOUSLY);
            clip.setMicrosecondPosition(this.time);
            clip.start();
        }
        catch (Exception e)
        {
            System.out.println("ERROR: Audio malfunction");
            e.printStackTrace();

        }

    }

    public void nextAudio()
    {
        file++;
        try
        {
            audioInputStream = AudioSystem.getAudioInputStream(new File("C://Users//DarkKnight528491//Desktop/Play/" + file +".wav"));
            clip = AudioSystem.getClip();
            clip.open(audioInputStream);
            clip.start();
        }
        catch (Exception e)
        {
            System.out.println("ERROR: Audio malfunction");
            e.printStackTrace();
        }

    }

    public void previousAudio()
    {
        file--;
        try
        {
            audioInputStream = AudioSystem.getAudioInputStream(new File("C://Users//DarkKnight528491//Desktop/Play/" + file +".wav"));
            clip = AudioSystem.getClip();
            clip.open(audioInputStream);
            clip.start();
        }
        catch (Exception e)
        {
            System.out.println("ERROR: Audio malfunction");
            e.printStackTrace();
        }

    }

    public void suffle()
    {
        Random randomNum= new Random();
        num1=randomNum.nextInt(2+1);

        try
        {
            audioInputStream = AudioSystem.getAudioInputStream(new File("C://Users//DarkKnight528491//Desktop/Play/" + num1 +".wav"));
            clip = AudioSystem.getClip();
            clip.open(audioInputStream);
            clip.start();
        }
        catch (Exception e)
        {
            System.out.println("ERROR: Audio malfunction");
            e.printStackTrace();
        }

    }
    public void next()
    {
       if(this.time == 50)
        {

    }
    }


    public void setVolume(float vol,Clip clip)
    {
        FloatControl control= (FloatControl)clip.getControl(FloatControl.Type.MASTER_GAIN);

        control.setValue(vol);
    }

    public long over()
    {
        if(clip.getMicrosecondLength()-10==clip.getMicrosecondPosition())
        {
            System.out.println("It works hahaha");
            status=-1;
        }
        else
        {
            status=-2;
        }


        return status;
    }






}
